#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)
#
# SPDX-License-Identifier: Apache-2.0

# pylint: disable=invalid-name, global-statement, redefined-outer-name
# pylint: disable=protected-access

""" Tests for ghafscan """

import os
import subprocess
import shutil
from pathlib import Path
import pytest

from ghafscanner.ghafscan import GhafScanner

################################################################################

MYDIR = Path(os.path.dirname(os.path.realpath(__file__)))
TEST_WORK_DIR = None
GHAFSCAN_ROOT = MYDIR / ".."
GHAFSCAN = GHAFSCAN_ROOT / "ghafscanner" / "ghafscan.py"

################################################################################


@pytest.fixture(scope="session")
def test_work_dir(tmp_path_factory):
    """Fixture for session-scope tempdir"""
    tempdir = tmp_path_factory.mktemp("test_ghafscan")
    return Path(tempdir)


@pytest.fixture(autouse=True)
def set_up_test_data(test_work_dir):
    """Fixture to set up the test data"""
    print("setup")
    global TEST_WORK_DIR
    TEST_WORK_DIR = test_work_dir
    TEST_WORK_DIR.mkdir(parents=True, exist_ok=True)
    print(f"using TEST_WORK_DIR: {TEST_WORK_DIR}")
    os.chdir(TEST_WORK_DIR)
    yield "resource"
    print("clean up")
    shutil.rmtree(TEST_WORK_DIR)


################################################################################


def test_nix_shell():
    """Test nix-shell doesn't fail and enters venv"""
    # Test running nix-shell. Inside the shell, test that
    # VIRTUAL_ENV variable is set, exit with failure if it is not set:
    run_cmd = "if [ -z ${VIRTUAL_ENV+x} ]; then exit 1; else exit 0; fi"
    cmd = ["nix-shell", "--run", run_cmd]
    os.chdir(GHAFSCAN_ROOT)
    assert subprocess.run(cmd, check=True).returncode == 0
    os.chdir(TEST_WORK_DIR)


################################################################################


def test_ghafscan_help():
    """Test ghafscan command line argument: '-h'"""
    cmd = [GHAFSCAN, "-h"]
    assert subprocess.run(cmd, check=True).returncode == 0


def test_ghafscan_basic():
    """Basic tests for GhafScanner"""
    scanner = GhafScanner(MYDIR)
    shutil.copytree(scanner.datadir, TEST_WORK_DIR, dirs_exist_ok=True)
    test_work_dir = Path(TEST_WORK_DIR)
    scanner.datadir = test_work_dir
    scanner.mydir = test_work_dir
    target = "generic-x86_64-release"
    out_new = scanner.datadir / f"vulns_new__{target}.csv"
    assert out_new.exists()
    out_old = scanner.datadir / f"vulns_old__{target}.csv"
    assert out_old.exists()
    out_upd = scanner.datadir / f"vulns_new_lock_updated__{target}.csv"
    assert out_upd.exists()
    out_uns = scanner.datadir / f"vulns_new_nixos_unstable__{target}.csv"
    assert out_uns.exists()
    scanner._report_target(target, out_new, out_old, out_upd, out_uns)
    readme = test_work_dir / "README.md"
    assert readme.exists()
    assert readme.stat().st_size != 0


################################################################################


if __name__ == "__main__":
    pytest.main([__file__])


################################################################################
